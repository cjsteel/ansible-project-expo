{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ansible Expo \u00b6 Commands \u00b6 `./base.yml -l workstation-003 -e python-interpreter=/usr/bin/python2 - Apply the base configuration to a workstation `./update -l workstations -e reboot=yes - Update all workstation and reboot them ./shutdown -l workstations -Shutdown all workstaions ./wakeonlan -l workstations - Power on all workstations Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Setting up a development platform \u00b6 Development","title":"Home"},{"location":"#ansible-expo","text":"","title":"Ansible Expo"},{"location":"#commands","text":"`./base.yml -l workstation-003 -e python-interpreter=/usr/bin/python2 - Apply the base configuration to a workstation `./update -l workstations -e reboot=yes - Update all workstation and reboot them ./shutdown -l workstations -Shutdown all workstaions ./wakeonlan -l workstations - Power on all workstations","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#setting-up-a-development-platform","text":"Development","title":"Setting up a development platform"},{"location":"controller/","text":"Controller \u00b6 Initial Controller Configuration \u00b6 Initial Controller Configuration Usage \u00b6 Activate the Production Virtual Environment \u00b6 This is done using an aliases which reflect the current (and past) production versions of Ansible and allows new Ansible versions to be added to the system without interfering the OS's base Python (and python applications such as pip) installation or with previous Ansible production version. ansible-2.10. # Use tab completion with unique command prefix to activate the desired Python virtual environment Expo Project Directory layout \u00b6 docs/ # mkdocs documentation expo/ ansible.cfg # active ansible configuration file ansible.cfgs/ # available ansible configurations ansible.cfg_testing ansible.cfg_production base.yml # base configuration playbook controller-base-roles-installation.yml controller-bootstrap-roles-installation.sh controller-development-roles-installation.yml controller-workstation-roles-installation.yml docs/ # mkdocs content index.md # mkdocs homepage inventory/ testing/ # testing inventory repository production/ # production inventory repository","title":"Controller"},{"location":"controller/#controller","text":"","title":"Controller"},{"location":"controller/#initial-controller-configuration","text":"Initial Controller Configuration","title":"Initial Controller Configuration"},{"location":"controller/#usage","text":"","title":"Usage"},{"location":"controller/#activate-the-production-virtual-environment","text":"This is done using an aliases which reflect the current (and past) production versions of Ansible and allows new Ansible versions to be added to the system without interfering the OS's base Python (and python applications such as pip) installation or with previous Ansible production version. ansible-2.10. # Use tab completion with unique command prefix to activate the desired Python virtual environment","title":"Activate the Production Virtual Environment"},{"location":"controller/#expo-project-directory-layout","text":"docs/ # mkdocs documentation expo/ ansible.cfg # active ansible configuration file ansible.cfgs/ # available ansible configurations ansible.cfg_testing ansible.cfg_production base.yml # base configuration playbook controller-base-roles-installation.yml controller-bootstrap-roles-installation.sh controller-development-roles-installation.yml controller-workstation-roles-installation.yml docs/ # mkdocs content index.md # mkdocs homepage inventory/ testing/ # testing inventory repository production/ # production inventory repository","title":"Expo Project Directory layout"},{"location":"controller/initial-controller-configuration/","text":"Initial Controller Configuration \u00b6 Requirements \u00b6 Python 3 \u00b6 pip3 \u00b6 venv \u00b6 Ansible \u00b6 Ansible Galaxy Hosted Roles \u00b6 These are finished and tested production roles that support the ansible-galaxy install command Ansible git hosted public and private roles \u00b6 These roles are github based roles which contain new features and/or customizations of roles found on Ansible Galaxy or roles that are not yet hosted by Ansible Galaxy These should only include tested and production ready roles These roles might also include: New updates and features. That the original developer is not interested in puling. That have not yet or may never be hosted on Ansible Galaxy Transient Roles Once time hot fixes Patches Installing production roles \u00b6 We make use of an Ansible Galaxy supported roles/requirements.yml file which allows for the loading of both Ansible Galaxy and git repository hosted roles. Orchestrating Systems \u00b6 Base configuration \u00b6 All systems on our imaginary LAN must have a (minimal) base configuration before the may become LAN members. In this example we will apply the (minimal) base configuration to a new system called workstation-003 Requirements \u00b6 resolvable host name must be included in the controllers inventory must have an administrative user must be reachable via ssh known_hosts Resolvable Host Name \u00b6 DNS \u00b6 nslookup workstation-003 /etc/hosts file \u00b6 In some cases, for example when developing or for systems that must continue running when a DNS is not available you may need to add new hosts to the controllers /etc/hosts . In this example our controller is applying the base configuration to three new system on a private network: 127.0.0.1 localhost 127.0.1.1 controller-001 192.168.1.124 workstation-001 192.168.1.125 workstation-002 192.168.1.126 workstation-003 # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters Note: Once the hostname and ip address have been added to the controllers /etc/hosts we are able to reach it using the hostname even though the hostname on the target system, workstation-003 in this case, may not be correct at the moment . Connectivity test \u00b6 We manually connect to the new host via ssh for our controller in order to ensure that everything is working as it should. This will also allow us to add our controller to the known_hosts file on the new system, or in some development situations, will give us an opportunity to remove any stale known_hosts entries. In this example our remote administrative user is the user julie ssh julie@workstation-003 If this example I am connecting from a controller running Ubuntu 20.04 and I get the following message as it is the first time I am connecting to a host named workstation-003 . The authenticity of host 'workstation-003 (192.168.1.100)' can ' t be established. ECDSA key fingerprint is SHA256:vXCJtTry4lMOc3cwMQ50vdFRG9JyR9jovZWs4XYY+JY. Are you sure you want to continue connecting ( yes/no/ [ fingerprint ]) ? yes As this is a private network running DHCP, I have connected to other hosts using the IP 192.168.0.100 previously and my output looks like this: Warning: Permanently added 'workstation-003' ( ECDSA ) to the list of known hosts. Warning: the ECDSA host key for 'workstation-003' differs from the key for the IP address '192.168.1.100' Offending key for IP in /home/csteel/.ssh/known_hosts:5 Are you sure you want to continue connecting ( yes/no ) ? no I remove the 5th line from my controllers (development system) ~/.ssh/known_hosts file and try and connect again: ssh julie@workstation-003 This time I am prompted for the admin users password: Warning: Permanently added the ECDSA host key for IP address '192.168.1.100' to the list of known hosts. julie@workstation-003 ' s password: Once I type in the correct password, \"mypassword\", with no quoted in this example, I am able to connect: julie@workstation-003 ' s password: Welcome to Ubuntu 20 .04 LTS ( GNU/Linux 5 .4.0-29-generic x86_64 ) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Last login: Wed May 6 19 :17:44 2020 from 192 .168.1.101 To run a command as administrator ( user \"root\" ) , use \"sudo <command>\" . See \"man sudo_root\" for details. julie@ubuntu:~$ SSH is working correctly so I exit and move on to the next step julie@ubuntu:~$ exit ssh agent \u00b6 The OpenSSH authentication agent will be used to hold private keys used for public key authentication. When the ssh-agent is started, it prints the shell commands required to set its environment variables. SSH looks at these environment variables and uses them to establish a connection to the agent. These environment variables are evaluated in the calling shell, bash or csh for example. Here we evaluate the environment variables from the terminal (probably the bash shell in many cases) and if ssh-agent is installed and running we should get ssh-agents PID (Process ID) as output. Evaluation command: eval ` /usr/bin/ssh-agent -s ` Output example: Agent pid 376452 ssh-add \u00b6 ssh-agent initially does not have any private keys. ssh-add is used to add one or more private key identities to the OpenSSH authentication agent (ssh-agent). Private keys can be added using ssh-add or by ssh when AddKeysToAgent is set in ssh_config. Multiple keys (identities) may be stored in ssh-agent concurrently and ssh will automatically use them if present. In addition to adding keys, ssh-add can also be used to remove keys from ssh-agent and to query the keys that are currently held by the agent. In the previous section we confirmed that the ssh-agent was installed and running. Now we will add a private key to the ssh-agent If all is as it should be, running the following command should prompt you for the keys pass phrase and will remember it on your local system (the controller) and it will be automatically provided when ssh requests it: /usr/bin/ssh-add Enter passphrase for /home/csteel/.ssh/id_rsa: my top secret pass phrase is this If you provided the correct pass phrase you will get the following output and you are ready to move on to the next step: Identity added: /home/csteel/.ssh/id_rsa ( /home/csteel/.ssh/id_rsa ) Close remote connections \u00b6 If you logged into one or more new target hosts as a temporary administrative user, for example to open a port or confirm connectivity, you will want to logout and close any other terminal sessions with all target hosts before applying the base configuration. Otherwise, you application of the base configuration will fail as the temporary administrative user will still have running processes. inventory/production/hosts \u00b6 In this example we see that workstation-003 has been added to the [workstations] section of our ini style hosts file: [controllers] controller-001 controller-002 [servers] server-001 server-002 [workstations] workstation-001 workstation-002 workstation-003 [base:children] controllers servers workstations In the [base:children] section we see that controllers , servers and workstations are all children of the base configuration section. In other words systems in the controllers , servers and workstations sections can all have the base configuration applied to them. ansible.cfg file \u00b6 I want to make sure that ansible.cfg is pointing to the correct inventory file so I cat it: cat ansible.cfg | grep inventory Output example: log_path = inventory/testing/log/ansible.log inventory = inventory/testing ansible.cfg is pointing to the testing inventory so I can manually edit it or run the included ./config.sh script like this: ./config.sh production and confirm in the output that we are now using the production inventory: production Copying production to ansible.cfg log_path = inventory/production/log/ansible.log inventory = inventory/production Applying the base configuration \u00b6 inventory/production/group_vars/all \u00b6 Before applying the base configuration you will want to take a look at the projects group_vars: nano inventory/production/group_vars/all group_vars/all contains variables that will be used for all systems. Since the base configuration will be applied to all systems this is the perfect place to set variables for things that all systems have in common. For this project, that includes local users on each system for (manual) administration as well as a user for executing automated activities. IMPORTANT \u00b6 You will probably want to change the state for the temporary user julie to be present before applying the base configuration. You want to do this because: You will be executing the base configuration as julie ansible command run \u00b6 ./base-system-configuration.yml -l \"workstation-003\" -kK -e ansible_user = julie -e ansible_python_interpreter = /usr/bin/python3","title":"Initial Controller Configuration"},{"location":"controller/initial-controller-configuration/#initial-controller-configuration","text":"","title":"Initial Controller Configuration"},{"location":"controller/initial-controller-configuration/#requirements","text":"","title":"Requirements"},{"location":"controller/initial-controller-configuration/#python-3","text":"","title":"Python 3"},{"location":"controller/initial-controller-configuration/#pip3","text":"","title":"pip3"},{"location":"controller/initial-controller-configuration/#venv","text":"","title":"venv"},{"location":"controller/initial-controller-configuration/#ansible","text":"","title":"Ansible"},{"location":"controller/initial-controller-configuration/#ansible-galaxy-hosted-roles","text":"These are finished and tested production roles that support the ansible-galaxy install command","title":"Ansible Galaxy Hosted Roles"},{"location":"controller/initial-controller-configuration/#ansible-git-hosted-public-and-private-roles","text":"These roles are github based roles which contain new features and/or customizations of roles found on Ansible Galaxy or roles that are not yet hosted by Ansible Galaxy These should only include tested and production ready roles These roles might also include: New updates and features. That the original developer is not interested in puling. That have not yet or may never be hosted on Ansible Galaxy Transient Roles Once time hot fixes Patches","title":"Ansible git hosted public and private roles"},{"location":"controller/initial-controller-configuration/#installing-production-roles","text":"We make use of an Ansible Galaxy supported roles/requirements.yml file which allows for the loading of both Ansible Galaxy and git repository hosted roles.","title":"Installing production roles"},{"location":"controller/initial-controller-configuration/#orchestrating-systems","text":"","title":"Orchestrating Systems"},{"location":"controller/initial-controller-configuration/#base-configuration","text":"All systems on our imaginary LAN must have a (minimal) base configuration before the may become LAN members. In this example we will apply the (minimal) base configuration to a new system called workstation-003","title":"Base configuration"},{"location":"controller/initial-controller-configuration/#requirements_1","text":"resolvable host name must be included in the controllers inventory must have an administrative user must be reachable via ssh known_hosts","title":"Requirements"},{"location":"controller/initial-controller-configuration/#resolvable-host-name","text":"","title":"Resolvable Host Name"},{"location":"controller/initial-controller-configuration/#dns","text":"nslookup workstation-003","title":"DNS"},{"location":"controller/initial-controller-configuration/#etchosts-file","text":"In some cases, for example when developing or for systems that must continue running when a DNS is not available you may need to add new hosts to the controllers /etc/hosts . In this example our controller is applying the base configuration to three new system on a private network: 127.0.0.1 localhost 127.0.1.1 controller-001 192.168.1.124 workstation-001 192.168.1.125 workstation-002 192.168.1.126 workstation-003 # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters Note: Once the hostname and ip address have been added to the controllers /etc/hosts we are able to reach it using the hostname even though the hostname on the target system, workstation-003 in this case, may not be correct at the moment .","title":"/etc/hosts file"},{"location":"controller/initial-controller-configuration/#connectivity-test","text":"We manually connect to the new host via ssh for our controller in order to ensure that everything is working as it should. This will also allow us to add our controller to the known_hosts file on the new system, or in some development situations, will give us an opportunity to remove any stale known_hosts entries. In this example our remote administrative user is the user julie ssh julie@workstation-003 If this example I am connecting from a controller running Ubuntu 20.04 and I get the following message as it is the first time I am connecting to a host named workstation-003 . The authenticity of host 'workstation-003 (192.168.1.100)' can ' t be established. ECDSA key fingerprint is SHA256:vXCJtTry4lMOc3cwMQ50vdFRG9JyR9jovZWs4XYY+JY. Are you sure you want to continue connecting ( yes/no/ [ fingerprint ]) ? yes As this is a private network running DHCP, I have connected to other hosts using the IP 192.168.0.100 previously and my output looks like this: Warning: Permanently added 'workstation-003' ( ECDSA ) to the list of known hosts. Warning: the ECDSA host key for 'workstation-003' differs from the key for the IP address '192.168.1.100' Offending key for IP in /home/csteel/.ssh/known_hosts:5 Are you sure you want to continue connecting ( yes/no ) ? no I remove the 5th line from my controllers (development system) ~/.ssh/known_hosts file and try and connect again: ssh julie@workstation-003 This time I am prompted for the admin users password: Warning: Permanently added the ECDSA host key for IP address '192.168.1.100' to the list of known hosts. julie@workstation-003 ' s password: Once I type in the correct password, \"mypassword\", with no quoted in this example, I am able to connect: julie@workstation-003 ' s password: Welcome to Ubuntu 20 .04 LTS ( GNU/Linux 5 .4.0-29-generic x86_64 ) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Last login: Wed May 6 19 :17:44 2020 from 192 .168.1.101 To run a command as administrator ( user \"root\" ) , use \"sudo <command>\" . See \"man sudo_root\" for details. julie@ubuntu:~$ SSH is working correctly so I exit and move on to the next step julie@ubuntu:~$ exit","title":"Connectivity test"},{"location":"controller/initial-controller-configuration/#ssh-agent","text":"The OpenSSH authentication agent will be used to hold private keys used for public key authentication. When the ssh-agent is started, it prints the shell commands required to set its environment variables. SSH looks at these environment variables and uses them to establish a connection to the agent. These environment variables are evaluated in the calling shell, bash or csh for example. Here we evaluate the environment variables from the terminal (probably the bash shell in many cases) and if ssh-agent is installed and running we should get ssh-agents PID (Process ID) as output. Evaluation command: eval ` /usr/bin/ssh-agent -s ` Output example: Agent pid 376452","title":"ssh agent"},{"location":"controller/initial-controller-configuration/#ssh-add","text":"ssh-agent initially does not have any private keys. ssh-add is used to add one or more private key identities to the OpenSSH authentication agent (ssh-agent). Private keys can be added using ssh-add or by ssh when AddKeysToAgent is set in ssh_config. Multiple keys (identities) may be stored in ssh-agent concurrently and ssh will automatically use them if present. In addition to adding keys, ssh-add can also be used to remove keys from ssh-agent and to query the keys that are currently held by the agent. In the previous section we confirmed that the ssh-agent was installed and running. Now we will add a private key to the ssh-agent If all is as it should be, running the following command should prompt you for the keys pass phrase and will remember it on your local system (the controller) and it will be automatically provided when ssh requests it: /usr/bin/ssh-add Enter passphrase for /home/csteel/.ssh/id_rsa: my top secret pass phrase is this If you provided the correct pass phrase you will get the following output and you are ready to move on to the next step: Identity added: /home/csteel/.ssh/id_rsa ( /home/csteel/.ssh/id_rsa )","title":"ssh-add"},{"location":"controller/initial-controller-configuration/#close-remote-connections","text":"If you logged into one or more new target hosts as a temporary administrative user, for example to open a port or confirm connectivity, you will want to logout and close any other terminal sessions with all target hosts before applying the base configuration. Otherwise, you application of the base configuration will fail as the temporary administrative user will still have running processes.","title":"Close remote connections"},{"location":"controller/initial-controller-configuration/#inventoryproductionhosts","text":"In this example we see that workstation-003 has been added to the [workstations] section of our ini style hosts file: [controllers] controller-001 controller-002 [servers] server-001 server-002 [workstations] workstation-001 workstation-002 workstation-003 [base:children] controllers servers workstations In the [base:children] section we see that controllers , servers and workstations are all children of the base configuration section. In other words systems in the controllers , servers and workstations sections can all have the base configuration applied to them.","title":"inventory/production/hosts"},{"location":"controller/initial-controller-configuration/#ansiblecfg-file","text":"I want to make sure that ansible.cfg is pointing to the correct inventory file so I cat it: cat ansible.cfg | grep inventory Output example: log_path = inventory/testing/log/ansible.log inventory = inventory/testing ansible.cfg is pointing to the testing inventory so I can manually edit it or run the included ./config.sh script like this: ./config.sh production and confirm in the output that we are now using the production inventory: production Copying production to ansible.cfg log_path = inventory/production/log/ansible.log inventory = inventory/production","title":"ansible.cfg file"},{"location":"controller/initial-controller-configuration/#applying-the-base-configuration","text":"","title":"Applying the base configuration"},{"location":"controller/initial-controller-configuration/#inventoryproductiongroup_varsall","text":"Before applying the base configuration you will want to take a look at the projects group_vars: nano inventory/production/group_vars/all group_vars/all contains variables that will be used for all systems. Since the base configuration will be applied to all systems this is the perfect place to set variables for things that all systems have in common. For this project, that includes local users on each system for (manual) administration as well as a user for executing automated activities.","title":"inventory/production/group_vars/all"},{"location":"controller/initial-controller-configuration/#important","text":"You will probably want to change the state for the temporary user julie to be present before applying the base configuration. You want to do this because: You will be executing the base configuration as julie","title":"IMPORTANT"},{"location":"controller/initial-controller-configuration/#ansible-command-run","text":"./base-system-configuration.yml -l \"workstation-003\" -kK -e ansible_user = julie -e ansible_python_interpreter = /usr/bin/python3","title":"ansible command run"},{"location":"development/","text":"Development \u00b6 Configuring an Expo Development System \u00b6 Ansible Expo Project Setup \u00b6 Developing with Expo \u00b6","title":"Overview"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#configuring-an-expo-development-system","text":"","title":"Configuring an Expo Development System"},{"location":"development/#ansible-expo-project-setup","text":"","title":"Ansible Expo Project Setup"},{"location":"development/#developing-with-expo","text":"","title":"Developing with Expo"},{"location":"development/ansible-project-setup/","text":"Ansible Project Expo Installation \u00b6 Overview \u00b6","title":"ansible"},{"location":"development/ansible-project-setup/#ansible-project-expo-installation","text":"","title":"Ansible Project Expo Installation"},{"location":"development/ansible-project-setup/#overview","text":"","title":"Overview"},{"location":"development/bash_magic-overview/","text":"bash_magic \u00b6 Usage of bash_magic makes it easy to manage and automate the addition and removal of bash startup file scripts using a traditional *.d directory structure without cluttering up your systems bash startup file(s). It is designed so that a single (vetted) repository of bash scripts can be used as it's source and allows the \"activation\" of only those scripts required for a particualr system or user via symlinks to ~/.*.d directories used to organize them into basic categories. Installing bash_magic Overview and Layout \u00b6 Symlinks to a repository of scripts organized by types located in a users ~/bin/bash_magic allow you to automatically load (import) the scripts when you start a terminal session. ~/.bashrc # automatically loads all scripts pointed to by symlinks in the following directories: ~/.bash_aliases.d/ ~/.bash_completion.d/ ~/.bash_functions.d/","title":"bash_magic"},{"location":"development/bash_magic-overview/#bash_magic","text":"Usage of bash_magic makes it easy to manage and automate the addition and removal of bash startup file scripts using a traditional *.d directory structure without cluttering up your systems bash startup file(s). It is designed so that a single (vetted) repository of bash scripts can be used as it's source and allows the \"activation\" of only those scripts required for a particualr system or user via symlinks to ~/.*.d directories used to organize them into basic categories. Installing bash_magic","title":"bash_magic"},{"location":"development/bash_magic-overview/#overview-and-layout","text":"Symlinks to a repository of scripts organized by types located in a users ~/bin/bash_magic allow you to automatically load (import) the scripts when you start a terminal session. ~/.bashrc # automatically loads all scripts pointed to by symlinks in the following directories: ~/.bash_aliases.d/ ~/.bash_completion.d/ ~/.bash_functions.d/","title":"Overview and Layout"},{"location":"development/configuring-an-expo-development-system/","text":"Configuring an Expo development system \u00b6 bash_magic \u00b6 bash_magic Overview Creating a virtual python environment for mkdocs-material \u00b6 Creating a virtual python environment for mkdocs-material Creating a virtual python environment for Ansible \u00b6 Creating a virtual python environment for Ansible Expo Ansible project setup \u00b6","title":"configuration"},{"location":"development/configuring-an-expo-development-system/#configuring-an-expo-development-system","text":"","title":"Configuring an Expo development system"},{"location":"development/configuring-an-expo-development-system/#bash_magic","text":"bash_magic Overview","title":"bash_magic"},{"location":"development/configuring-an-expo-development-system/#creating-a-virtual-python-environment-for-mkdocs-material","text":"Creating a virtual python environment for mkdocs-material","title":"Creating a virtual python environment for mkdocs-material"},{"location":"development/configuring-an-expo-development-system/#creating-a-virtual-python-environment-for-ansible","text":"Creating a virtual python environment for Ansible","title":"Creating a virtual python environment for Ansible"},{"location":"development/configuring-an-expo-development-system/#expo-ansible-project-setup","text":"","title":"Expo Ansible project setup"},{"location":"development/creating-a-virtual-python-environment-for-ansible/","text":"Creating an Ansible virtual python environment \u00b6 First you will want to start a new terminal session. Using the latest version of Ansible \u00b6 Again, in order the versions of Ansible that are available for installation you can use the pip3 install ansible== command with no version as we did when we created our mkdocs-material virtual environment. As in the mkdocs-material virtual environment creation we prefix our command using sudo so that it will run with out generating a permissions error. Again, we will examine the output in order to determine that the latest available version of Ansible that is installable using pip3: sudo pip3 install ansible == In my case, the latest released version is 2.10.4 Creating a Python 3 virtual environment for your Ansible installation \u00b6 python3 -m venv ~/.venv/ansible-2.10.4 Next I activate the new Python environment. This will allow me to install Ansible into the new Python environment and will keep it sandboxed from my system level Python and any other virtual python environments that I create source ~/.venv/ansible-2.10.4/bin/activate Once activated your command prompt will be prefixed with name of the active virtual environment. In my case my new command prompt looks like this: ( ansible-2.10.4 ) csteel@p1u20:~/MEGAsync/projects/ansible-project-expo$ Virtual environment confirmation Next we confirm the location of current virtual environments pip3 command: which pip3 Example output: /home/csteel/.venv/ansible-2.10.4/bin/pip3 Installing Ansible \u00b6 Once we are in our virtual environment we install our targeted version of Ansible: pip3 install ansible == 2 .10.4 Confirmation \u00b6 We can confirm our installation using: which ansible-galaxy and perform a version check as well if desired: ansible-galaxy --version In my case the version information was incorrect! I installed version 3.10.4 but the version information showed 3.10.3 indicating that perhaps the developer(ers) failed to update the versioning file! Output example: ansible-galaxy 2 .10.3 config file = /etc/ansible/ansible.cfg configured module search path = [ '/home/csteel/.ansible/plugins/modules' , '/usr/share/ansible/plugins/modules' ] ansible python module location = /home/csteel/.venv/ansible-2.10.4/lib/python3.8/site-packages/ansible executable location = /home/csteel/.venv/ansible-2.10.4/bin/ansible-galaxy python version = 3 .8.5 ( default, Jul 28 2020 , 12 :59:40 ) [ GCC 9 .3.0 ] Creating an alias using bash_magic \u00b6 nano ~/bin/bash_magic/bash_aliases.d/ansible-2.10.4.sh entry example alias ansible-2.10.4 = 'source ~/.venv/ansible-2.10.4/bin/activate' Make it executable chmod +x ~/bin/bash_magic/bash_aliases.d/ansible-2.10.4.sh create symlink to the bash magic shell script cd ~/.bash_aliases.d/ ln -s ~/bin/bash_magic/bash_aliases.d/ansible-2.10.4.sh . source ansible-2.10.4.sh Return to previous directory cd - Test your new alias ansible-2.10.4 your command prompt should change to reflect your pip3 installation. You may want to change to your mkdocs-material.someversion and then back to your ansible virtual environment to ensure that all if good. My command prompt looked like this: ( ansible-2.10.4 ) csteel@p1u20:~/MEGAsync/projects/ansible-project-expo$","title":"Creating a virtual python environment for ansible"},{"location":"development/creating-a-virtual-python-environment-for-ansible/#creating-an-ansible-virtual-python-environment","text":"First you will want to start a new terminal session.","title":"Creating an Ansible virtual python environment"},{"location":"development/creating-a-virtual-python-environment-for-ansible/#using-the-latest-version-of-ansible","text":"Again, in order the versions of Ansible that are available for installation you can use the pip3 install ansible== command with no version as we did when we created our mkdocs-material virtual environment. As in the mkdocs-material virtual environment creation we prefix our command using sudo so that it will run with out generating a permissions error. Again, we will examine the output in order to determine that the latest available version of Ansible that is installable using pip3: sudo pip3 install ansible == In my case, the latest released version is 2.10.4","title":"Using the latest version of Ansible"},{"location":"development/creating-a-virtual-python-environment-for-ansible/#creating-a-python-3-virtual-environment-for-your-ansible-installation","text":"python3 -m venv ~/.venv/ansible-2.10.4 Next I activate the new Python environment. This will allow me to install Ansible into the new Python environment and will keep it sandboxed from my system level Python and any other virtual python environments that I create source ~/.venv/ansible-2.10.4/bin/activate Once activated your command prompt will be prefixed with name of the active virtual environment. In my case my new command prompt looks like this: ( ansible-2.10.4 ) csteel@p1u20:~/MEGAsync/projects/ansible-project-expo$ Virtual environment confirmation Next we confirm the location of current virtual environments pip3 command: which pip3 Example output: /home/csteel/.venv/ansible-2.10.4/bin/pip3","title":"Creating a Python 3 virtual environment for your Ansible installation"},{"location":"development/creating-a-virtual-python-environment-for-ansible/#installing-ansible","text":"Once we are in our virtual environment we install our targeted version of Ansible: pip3 install ansible == 2 .10.4","title":"Installing Ansible"},{"location":"development/creating-a-virtual-python-environment-for-ansible/#confirmation","text":"We can confirm our installation using: which ansible-galaxy and perform a version check as well if desired: ansible-galaxy --version In my case the version information was incorrect! I installed version 3.10.4 but the version information showed 3.10.3 indicating that perhaps the developer(ers) failed to update the versioning file! Output example: ansible-galaxy 2 .10.3 config file = /etc/ansible/ansible.cfg configured module search path = [ '/home/csteel/.ansible/plugins/modules' , '/usr/share/ansible/plugins/modules' ] ansible python module location = /home/csteel/.venv/ansible-2.10.4/lib/python3.8/site-packages/ansible executable location = /home/csteel/.venv/ansible-2.10.4/bin/ansible-galaxy python version = 3 .8.5 ( default, Jul 28 2020 , 12 :59:40 ) [ GCC 9 .3.0 ]","title":"Confirmation"},{"location":"development/creating-a-virtual-python-environment-for-ansible/#creating-an-alias-using-bash_magic","text":"nano ~/bin/bash_magic/bash_aliases.d/ansible-2.10.4.sh entry example alias ansible-2.10.4 = 'source ~/.venv/ansible-2.10.4/bin/activate' Make it executable chmod +x ~/bin/bash_magic/bash_aliases.d/ansible-2.10.4.sh create symlink to the bash magic shell script cd ~/.bash_aliases.d/ ln -s ~/bin/bash_magic/bash_aliases.d/ansible-2.10.4.sh . source ansible-2.10.4.sh Return to previous directory cd - Test your new alias ansible-2.10.4 your command prompt should change to reflect your pip3 installation. You may want to change to your mkdocs-material.someversion and then back to your ansible virtual environment to ensure that all if good. My command prompt looked like this: ( ansible-2.10.4 ) csteel@p1u20:~/MEGAsync/projects/ansible-project-expo$","title":"Creating an alias using bash_magic"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/","text":"Creating a virtual python environment for mkdocs-material.md \u00b6 Requirements \u00b6 Python 3 (For older systems running Python 2 systems see Pyton 2 virtualenvs command.) pip3 sudo apt install python3-pip on Ubuntu 20.04 venv The venv Python 3 module provides support for creating lightweight \u201cvirtual environments\u201d with their > venv \u2014 Creation of virtual environments mkdocs-material mkdocs-minify-plugin References \u00b6 www.mkdocs.org mkdocs-material/getting-started mkdocs-material/contributing squidfunk.github.io/mkdocs-material/ cjsteel/mkdocs-material Virtual environment creation for mkdocs-material \u00b6 Virtual environments allow you to run multiple Python applications as well as multiple versions of Python without making changes to the system Python. In this example we will name our virtual Python environment for the application and version so that you can run multiple isolated application version. Determine the latest available version of mkdocs-material \u00b6 We will use the outout of the command pip3 install mkdocs-material== in order to determine the latest stable version of mkdocs-material that is available for installation via pip3. sudo pip3 install mkdocs-material == In my case the latest version is 6.1.7. Creating your virtual environment \u00b6 Before installing mkdocs-material-6.1.7 I will to create and activate a Python virtual environment which will \"sandbox\" my install and prevent it from interfering with my systems version of Python and any system wide Python applications that I have. python3 -m venv ~/.venv/mkdocs-material-6.1.7 Activating your mkdocs-material virtual environment \u00b6 source ~/.venv/mkdocs-material-6.1.7/bin/activate Once the environment is activated your command prompt will become prefixed with the name of the active virtual (Python) environment. Mine looks like this: ( mkdocs-material-6.1.7 ) csteel@p1u20:~/MEGAsync/projects/ansible-project-expo$ Test and confirmation \u00b6 Before continuing we will take a moment to ensure that everything is working as it should be. With your new environment is activated the location of your default version of pip3 will change to the virtual environments. We can confirm this by running: which pip3 The output should reflect the directory that your virtual environment is created in. For this example that would be something similar this this: /home/csteel/.venv/mkdocs-material-6.1.7/bin/pip3 Install mkdocs-material \u00b6 Now that your virtual environment is active, any pip3 installs will be installed to the virtual environment insulating it from any other virtual environments you might have as well as any pip3 installs that have been made using your systems pip3 version. pip3 install mkdocs-material == 6 .1.7 By the way, you may have some red output error output. Don't panic just yet. You might want to make a note of the error. In my case everything worked well in spite of the error. You might also want to try reinstalling, but again, an error does not neccesarily mean that things have failed install any required plugins \u00b6 When this document was last edited the expo project was using the mkdocs-minify-plugin plugin. Ensure that your mkdocs-material virtual environment is active and install the plugin: pip3 install mkdocs-minify-plugin During my installation I got an error: ERROR: Failed building wheel for jsmin Running the command again gave no error. Serve the projects documentation \u00b6 Now that all of the requirements have been installed you should be able to run the built in mkdocs server in order to view the expo projects documentation in your development systems' browser. The expo projects root directory contains a file called mkdocs.yml . Change to your expo projects root directory and then run the mkdocs serve command: mkdocs serve You will see some output which includes a message similar to this: [ I 201208 06 :59:18 server:335 ] Serving on http://127.0.0.1:8000 By default your documentation will be available at the URL mentioned above. You can copy and paste this to your local browser and view this documentation in your browser if your firewall is not blocking port 8000 or some other issue has occured. Creating an alias using bash_magic \u00b6 Create your source alias script \u00b6 Add a script and open it for editing in your bash_magic bin aliases directories. nano ~/bin/bash_magic/bash_aliases.d/mkdocs-material-6.1.7.sh Example entry: alias mkdocs-material-6.1.7 = 'source ~/.venv/mkdocs-material-6.1.7/bin/activate' Make it executable chmod +x ~/bin/bash_magic/bash_aliases.d/mkdocs-material-6.1.7.sh Create your symlink cd ~/.bash_aliases.d/ chmod +x ~/bin/bash_magic/bash_aliases.d/mkdocs-material-6.1.7.sh ln -s ~/bin/bash_magic/bash_aliases.d/mkdocs-material-6.1.7.sh . Source your symlink source mkdocs-material-6.1.7.sh Return to your previous directory location cd - test your new alias \u00b6 mkdocs-material-6.1.7.sh","title":"Creating a virtual python environment for mkdocs-material.md"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#creating-a-virtual-python-environment-for-mkdocs-materialmd","text":"","title":"Creating a virtual python environment for mkdocs-material.md"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#requirements","text":"Python 3 (For older systems running Python 2 systems see Pyton 2 virtualenvs command.) pip3 sudo apt install python3-pip on Ubuntu 20.04 venv The venv Python 3 module provides support for creating lightweight \u201cvirtual environments\u201d with their > venv \u2014 Creation of virtual environments mkdocs-material mkdocs-minify-plugin","title":"Requirements"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#references","text":"www.mkdocs.org mkdocs-material/getting-started mkdocs-material/contributing squidfunk.github.io/mkdocs-material/ cjsteel/mkdocs-material","title":"References"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#virtual-environment-creation-for-mkdocs-material","text":"Virtual environments allow you to run multiple Python applications as well as multiple versions of Python without making changes to the system Python. In this example we will name our virtual Python environment for the application and version so that you can run multiple isolated application version.","title":"Virtual environment creation for mkdocs-material"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#determine-the-latest-available-version-of-mkdocs-material","text":"We will use the outout of the command pip3 install mkdocs-material== in order to determine the latest stable version of mkdocs-material that is available for installation via pip3. sudo pip3 install mkdocs-material == In my case the latest version is 6.1.7.","title":"Determine the latest available version of mkdocs-material"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#creating-your-virtual-environment","text":"Before installing mkdocs-material-6.1.7 I will to create and activate a Python virtual environment which will \"sandbox\" my install and prevent it from interfering with my systems version of Python and any system wide Python applications that I have. python3 -m venv ~/.venv/mkdocs-material-6.1.7","title":"Creating your virtual environment"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#activating-your-mkdocs-material-virtual-environment","text":"source ~/.venv/mkdocs-material-6.1.7/bin/activate Once the environment is activated your command prompt will become prefixed with the name of the active virtual (Python) environment. Mine looks like this: ( mkdocs-material-6.1.7 ) csteel@p1u20:~/MEGAsync/projects/ansible-project-expo$","title":"Activating your mkdocs-material virtual environment"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#test-and-confirmation","text":"Before continuing we will take a moment to ensure that everything is working as it should be. With your new environment is activated the location of your default version of pip3 will change to the virtual environments. We can confirm this by running: which pip3 The output should reflect the directory that your virtual environment is created in. For this example that would be something similar this this: /home/csteel/.venv/mkdocs-material-6.1.7/bin/pip3","title":"Test and confirmation"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#install-mkdocs-material","text":"Now that your virtual environment is active, any pip3 installs will be installed to the virtual environment insulating it from any other virtual environments you might have as well as any pip3 installs that have been made using your systems pip3 version. pip3 install mkdocs-material == 6 .1.7 By the way, you may have some red output error output. Don't panic just yet. You might want to make a note of the error. In my case everything worked well in spite of the error. You might also want to try reinstalling, but again, an error does not neccesarily mean that things have failed","title":"Install mkdocs-material"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#install-any-required-plugins","text":"When this document was last edited the expo project was using the mkdocs-minify-plugin plugin. Ensure that your mkdocs-material virtual environment is active and install the plugin: pip3 install mkdocs-minify-plugin During my installation I got an error: ERROR: Failed building wheel for jsmin Running the command again gave no error.","title":"install any required plugins"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#serve-the-projects-documentation","text":"Now that all of the requirements have been installed you should be able to run the built in mkdocs server in order to view the expo projects documentation in your development systems' browser. The expo projects root directory contains a file called mkdocs.yml . Change to your expo projects root directory and then run the mkdocs serve command: mkdocs serve You will see some output which includes a message similar to this: [ I 201208 06 :59:18 server:335 ] Serving on http://127.0.0.1:8000 By default your documentation will be available at the URL mentioned above. You can copy and paste this to your local browser and view this documentation in your browser if your firewall is not blocking port 8000 or some other issue has occured.","title":"Serve the projects documentation"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#creating-an-alias-using-bash_magic","text":"","title":"Creating an alias using bash_magic"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#create-your-source-alias-script","text":"Add a script and open it for editing in your bash_magic bin aliases directories. nano ~/bin/bash_magic/bash_aliases.d/mkdocs-material-6.1.7.sh Example entry: alias mkdocs-material-6.1.7 = 'source ~/.venv/mkdocs-material-6.1.7/bin/activate' Make it executable chmod +x ~/bin/bash_magic/bash_aliases.d/mkdocs-material-6.1.7.sh Create your symlink cd ~/.bash_aliases.d/ chmod +x ~/bin/bash_magic/bash_aliases.d/mkdocs-material-6.1.7.sh ln -s ~/bin/bash_magic/bash_aliases.d/mkdocs-material-6.1.7.sh . Source your symlink source mkdocs-material-6.1.7.sh Return to your previous directory location cd -","title":"Create your source alias script"},{"location":"development/creating-a-virtual-python-environment-for-mkdocs-material/#test-your-new-alias","text":"mkdocs-material-6.1.7.sh","title":"test your new alias"},{"location":"development/project-development/","text":"Expo project development \u00b6","title":"project development"},{"location":"development/project-development/#expo-project-development","text":"","title":"Expo project development"},{"location":"guide/","text":"Guide \u00b6 Configuration and usage guide for orchestrating a systems parc of (Ansible) controllers, servers and workstations using Ansible System Requirements \u00b6 BIOS / (U)EFI Settings Wake-on-LAN ( WoL ) Network booting DNS or ability to edit controllers /etc/hosts file Orchestrating Systems \u00b6 Base configuration \u00b6 All systems on our imaginary LAN must have a (minimal) base configuration before the may become LAN members. In this example we will apply the (minimal) base configuration to a new system called workstation-003 Requirements \u00b6 resolvable host name must be included in the controllers inventory must have an administrative user must be reachable via ssh known_hosts Resolvable Host Name \u00b6 DNS \u00b6 nslookup workstation-003 /etc/hosts file \u00b6 When developing it may sometimes be preferable to add a new host to the controllers /etc/hosts . In this example our controller is applying the base configuration to three new system on a (protected) private network: 127.0.0.1 localhost 127.0.1.1 controller-001 192.168.1.124 workstation-001 192.168.1.125 workstation-002 192.168.1.126 workstation-003 # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters Once the hostname and ip address have been added to the controllers /etc/hosts file it should be reachable by the hostname even though the hostname on the target system, workstation-003 may not be correct at the moment . Important! \u00b6 If you logged into your new host as the administrative user in order to get the ip address, make sure you logout once you are finished, otherwise, you application of the base configuration will fail as the user will still have running processes! Connectivity test \u00b6 We manually connect to the new host via ssh for our controller in order to ensure that everything is working as it should. This will also allow us to add our controller to the known_hosts file on the new system, or in some development situations, will give us an opportunity to remove any stale known_hosts entries. In this example our remote administrative user is the user julie ssh julie@workstation-003 If this example I am connecting from a controller running Ubuntu 20.04 and I get the following message as it is the first time I am connecting to a host named workstation-003 . The authenticity of host 'workstation-003 (192.168.1.100)' can't be established. ECDSA key fingerprint is SHA256:vXCJtTry4lMOc3cwMQ50vdFRG9JyR9jovZWs4XYY+JY. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes As this is a private network running DHCP, I have connected to other hosts using the IP 192.168.0.100 previously and my output looks like this: Warning: Permanently added 'workstation-003' (ECDSA) to the list of known hosts. Warning: the ECDSA host key for 'workstation-003' differs from the key for the IP address '192.168.1.100' Offending key for IP in /home/csteel/.ssh/known_hosts:5 Are you sure you want to continue connecting (yes/no)? no I remove the 5th line from my controllers (development system) ~/.ssh/known_hosts file and try and connect again: ssh julie@workstation-003 This time I am prompted for the admin users password: Warning: Permanently added the ECDSA host key for IP address '192.168.1.100' to the list of known hosts. julie@workstation-003's password: Once I type in the correct password, \"mypassword\", with no quoted in this example, I am able to connect: julie@workstation-003's password: Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-29-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Last login: Wed May 6 19:17:44 2020 from 192.168.1.101 To run a command as administrator (user \"root\"), use \"sudo <command>\". See \"man sudo_root\" for details. julie@ubuntu:~$ SSH is working correctly so I exit and move on to the next step julie@ubuntu:~$ exit ssh agent \u00b6 The OpenSSH authentication agent will be used to hold private keys used for public key authentication. When the ssh-agent is started, it prints the shell commands required to set its environment variables. SSH looks at these environment variables and uses them to establish a connection to the agent. These environment variables are evaluated in the calling shell, bash or csh for example. Here we evaluate the environment variables from the terminal (probably the bash shell in many cases) and if ssh-agent is installed and running we should get ssh-agents PID (Process ID) as output. Evaluation command: eval `/usr/bin/ssh-agent -s` Output example: Agent pid 376452 ssh-add \u00b6 ssh-agent initially does not have any private keys. ssh-add is used to add one or more private key identities to the OpenSSH authentication agent (ssh-agent). Private keys can be added using ssh-add or by ssh when AddKeysToAgent is set in ssh_config. Multiple keys (identities) may be stored in ssh-agent concurrently and ssh will automatically use them if present. In addition to adding keys, ssh-add can also be used to remove keys from ssh-agent and to query the keys that are currently held by the agent. In the previous section we confirmed that the ssh-agent was installed and running. Now we will add a private key to the ssh-agent If all is as it should be, running the following command should prompt you for the keys pass phrase and will remember it on your local system (the controller) and it will be automatically provided when ssh requests it: /usr/bin/ssh-add Enter passphrase for /home/csteel/.ssh/id_rsa: my top secret pass phrase is this If you provided the correct pass phrase you will get the following output and you are ready to move on to the next step: Identity added: /home/csteel/.ssh/id_rsa (/home/csteel/.ssh/id_rsa) inventory/production/hosts \u00b6 In this example we see that workstation-003 has been added to the [workstations] section of our ini style hosts file: [controllers] controller-001 controller-002 [servers] server-001 server-002 [workstations] workstation-001 workstation-002 workstation-003 [base:children] controllers servers workstations In the [base:children] section we see that controllers , servers and workstations are all children of the base configuration section. In other words systems in the controllers , servers and workstations sections can all have the base configuration applied to them. ansible.cfg file \u00b6 I want to make sure that ansible.cfg is pointing to the correct inventory file so I cat it: cat ansible.cfg | grep inventory Output example: log_path = inventory/testing/log/ansible.log inventory = inventory/testing ansible.cfg is pointing to the testing inventory so I can manually edit it or run the included ./config.sh script like this: ./config.sh production and confirm in the output that we are now using the production inventory: production Copying production to ansible.cfg log_path = inventory/production/log/ansible.log inventory = inventory/production Applying the base configuration \u00b6 inventory/production/group_vars/all \u00b6 Before applying the base configuration you will want to take a look at the projects group_vars: nano inventory/production/group_vars/all group_vars/all contains variables that will be used for all systems. Since the base configuration will be applied to all systems this is the perfect place to set variables for things that all systems have in common. For this project, that includes local users on each system for (manual) administration as well as a user for executing automated activities. IMPORTANT \u00b6 You will probably want to change the state for the temporary user julie to be present before applying the base configuration. You want to do this because: You will be executing the base configuration as julie ansible command run \u00b6 ./base-system-configuration.yml -l \"workstation-003\" -kK -e ansible_user=julie -e ansible_python_int Controller(s) \u00b6 Controller setup \u00b6 Requirements \u00b6 Repositories \u00b6 Project repository clone or copy ansible-project-expo Production inventory repository a private repository is recommended ansible-inventory-production ssh key pair pass phrase made of seven or more random words recommended Controllers, Servers and Workstations \u00b6 All parc member systems must have the current base configuration applied in order to be members of the LAN or WAN. Security \u00b6 At this time the base configuration includes a basic firewall, fail2ban and applies a more restricted umask for all local users. The best security is continuous integrated rather than applying security \"on top\" of static configurations.","title":"Guide"},{"location":"guide/#guide","text":"Configuration and usage guide for orchestrating a systems parc of (Ansible) controllers, servers and workstations using Ansible","title":"Guide"},{"location":"guide/#system-requirements","text":"BIOS / (U)EFI Settings Wake-on-LAN ( WoL ) Network booting DNS or ability to edit controllers /etc/hosts file","title":"System Requirements"},{"location":"guide/#orchestrating-systems","text":"","title":"Orchestrating Systems"},{"location":"guide/#base-configuration","text":"All systems on our imaginary LAN must have a (minimal) base configuration before the may become LAN members. In this example we will apply the (minimal) base configuration to a new system called workstation-003","title":"Base configuration"},{"location":"guide/#requirements","text":"resolvable host name must be included in the controllers inventory must have an administrative user must be reachable via ssh known_hosts","title":"Requirements"},{"location":"guide/#resolvable-host-name","text":"","title":"Resolvable Host Name"},{"location":"guide/#dns","text":"nslookup workstation-003","title":"DNS"},{"location":"guide/#etchosts-file","text":"When developing it may sometimes be preferable to add a new host to the controllers /etc/hosts . In this example our controller is applying the base configuration to three new system on a (protected) private network: 127.0.0.1 localhost 127.0.1.1 controller-001 192.168.1.124 workstation-001 192.168.1.125 workstation-002 192.168.1.126 workstation-003 # The following lines are desirable for IPv6 capable hosts ::1 ip6-localhost ip6-loopback fe00::0 ip6-localnet ff00::0 ip6-mcastprefix ff02::1 ip6-allnodes ff02::2 ip6-allrouters Once the hostname and ip address have been added to the controllers /etc/hosts file it should be reachable by the hostname even though the hostname on the target system, workstation-003 may not be correct at the moment .","title":"/etc/hosts file"},{"location":"guide/#important","text":"If you logged into your new host as the administrative user in order to get the ip address, make sure you logout once you are finished, otherwise, you application of the base configuration will fail as the user will still have running processes!","title":"Important!"},{"location":"guide/#connectivity-test","text":"We manually connect to the new host via ssh for our controller in order to ensure that everything is working as it should. This will also allow us to add our controller to the known_hosts file on the new system, or in some development situations, will give us an opportunity to remove any stale known_hosts entries. In this example our remote administrative user is the user julie ssh julie@workstation-003 If this example I am connecting from a controller running Ubuntu 20.04 and I get the following message as it is the first time I am connecting to a host named workstation-003 . The authenticity of host 'workstation-003 (192.168.1.100)' can't be established. ECDSA key fingerprint is SHA256:vXCJtTry4lMOc3cwMQ50vdFRG9JyR9jovZWs4XYY+JY. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes As this is a private network running DHCP, I have connected to other hosts using the IP 192.168.0.100 previously and my output looks like this: Warning: Permanently added 'workstation-003' (ECDSA) to the list of known hosts. Warning: the ECDSA host key for 'workstation-003' differs from the key for the IP address '192.168.1.100' Offending key for IP in /home/csteel/.ssh/known_hosts:5 Are you sure you want to continue connecting (yes/no)? no I remove the 5th line from my controllers (development system) ~/.ssh/known_hosts file and try and connect again: ssh julie@workstation-003 This time I am prompted for the admin users password: Warning: Permanently added the ECDSA host key for IP address '192.168.1.100' to the list of known hosts. julie@workstation-003's password: Once I type in the correct password, \"mypassword\", with no quoted in this example, I am able to connect: julie@workstation-003's password: Welcome to Ubuntu 20.04 LTS (GNU/Linux 5.4.0-29-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage Last login: Wed May 6 19:17:44 2020 from 192.168.1.101 To run a command as administrator (user \"root\"), use \"sudo <command>\". See \"man sudo_root\" for details. julie@ubuntu:~$ SSH is working correctly so I exit and move on to the next step julie@ubuntu:~$ exit","title":"Connectivity test"},{"location":"guide/#ssh-agent","text":"The OpenSSH authentication agent will be used to hold private keys used for public key authentication. When the ssh-agent is started, it prints the shell commands required to set its environment variables. SSH looks at these environment variables and uses them to establish a connection to the agent. These environment variables are evaluated in the calling shell, bash or csh for example. Here we evaluate the environment variables from the terminal (probably the bash shell in many cases) and if ssh-agent is installed and running we should get ssh-agents PID (Process ID) as output. Evaluation command: eval `/usr/bin/ssh-agent -s` Output example: Agent pid 376452","title":"ssh agent"},{"location":"guide/#ssh-add","text":"ssh-agent initially does not have any private keys. ssh-add is used to add one or more private key identities to the OpenSSH authentication agent (ssh-agent). Private keys can be added using ssh-add or by ssh when AddKeysToAgent is set in ssh_config. Multiple keys (identities) may be stored in ssh-agent concurrently and ssh will automatically use them if present. In addition to adding keys, ssh-add can also be used to remove keys from ssh-agent and to query the keys that are currently held by the agent. In the previous section we confirmed that the ssh-agent was installed and running. Now we will add a private key to the ssh-agent If all is as it should be, running the following command should prompt you for the keys pass phrase and will remember it on your local system (the controller) and it will be automatically provided when ssh requests it: /usr/bin/ssh-add Enter passphrase for /home/csteel/.ssh/id_rsa: my top secret pass phrase is this If you provided the correct pass phrase you will get the following output and you are ready to move on to the next step: Identity added: /home/csteel/.ssh/id_rsa (/home/csteel/.ssh/id_rsa)","title":"ssh-add"},{"location":"guide/#inventoryproductionhosts","text":"In this example we see that workstation-003 has been added to the [workstations] section of our ini style hosts file: [controllers] controller-001 controller-002 [servers] server-001 server-002 [workstations] workstation-001 workstation-002 workstation-003 [base:children] controllers servers workstations In the [base:children] section we see that controllers , servers and workstations are all children of the base configuration section. In other words systems in the controllers , servers and workstations sections can all have the base configuration applied to them.","title":"inventory/production/hosts"},{"location":"guide/#ansiblecfg-file","text":"I want to make sure that ansible.cfg is pointing to the correct inventory file so I cat it: cat ansible.cfg | grep inventory Output example: log_path = inventory/testing/log/ansible.log inventory = inventory/testing ansible.cfg is pointing to the testing inventory so I can manually edit it or run the included ./config.sh script like this: ./config.sh production and confirm in the output that we are now using the production inventory: production Copying production to ansible.cfg log_path = inventory/production/log/ansible.log inventory = inventory/production","title":"ansible.cfg file"},{"location":"guide/#applying-the-base-configuration","text":"","title":"Applying the base configuration"},{"location":"guide/#inventoryproductiongroup_varsall","text":"Before applying the base configuration you will want to take a look at the projects group_vars: nano inventory/production/group_vars/all group_vars/all contains variables that will be used for all systems. Since the base configuration will be applied to all systems this is the perfect place to set variables for things that all systems have in common. For this project, that includes local users on each system for (manual) administration as well as a user for executing automated activities.","title":"inventory/production/group_vars/all"},{"location":"guide/#important_1","text":"You will probably want to change the state for the temporary user julie to be present before applying the base configuration. You want to do this because: You will be executing the base configuration as julie","title":"IMPORTANT"},{"location":"guide/#ansible-command-run","text":"./base-system-configuration.yml -l \"workstation-003\" -kK -e ansible_user=julie -e ansible_python_int","title":"ansible command run"},{"location":"guide/#controllers","text":"","title":"Controller(s)"},{"location":"guide/#controller-setup","text":"","title":"Controller setup"},{"location":"guide/#requirements_1","text":"","title":"Requirements"},{"location":"guide/#repositories","text":"Project repository clone or copy ansible-project-expo Production inventory repository a private repository is recommended ansible-inventory-production ssh key pair pass phrase made of seven or more random words recommended","title":"Repositories"},{"location":"guide/#controllers-servers-and-workstations","text":"All parc member systems must have the current base configuration applied in order to be members of the LAN or WAN.","title":"Controllers, Servers and Workstations"},{"location":"guide/#security","text":"At this time the base configuration includes a basic firewall, fail2ban and applies a more restricted umask for all local users. The best security is continuous integrated rather than applying security \"on top\" of static configurations.","title":"Security"}]}